import numpy as np

def lu_decomposition_crout(A, b):
    """
    Mencari solusi sistem persamaan linear menggunakan metode dekomposisi Crout.
    
    Parameters:
        A (numpy.ndarray): Matriks koefisien (m x n).
        b (numpy.ndarray): Vektor konstanta (m x 1).
    
    Returns:
        numpy.ndarray: Solusi dari sistem persamaan linear (n x 1).
    """
    n = len(A)
    L = np.zeros((n, n))
    U = np.zeros((n, n))
    
    # LU Dekomposisi dengan crout method
    for i in range(n):
        U[i, i] = 1
        for j in range(i, n):
            sum_ = sum(L[j, k] * U[k, i] for k in range(j))
            L[j, i] = A[j, i] - sum_
        for j in range(i+1, n):
            sum_ = sum(L[i, k] * U[k, j] for k in range(i))
            U[i, j] = (A[i, j] - sum_) / L[i, i]
    
    # Penyelesaian LY = B 
    Y = np.zeros(n)
    for i in range(n):
        Y[i] = b[i] - np.dot(L[i, :i], Y[:i])
    
    # Penyelesaian UX = Y 
    X = np.zeros(n)
    for i in range(n-1, -1, -1):
        X[i] = (Y[i] - np.dot(U[i, i+1:], X[i+1:])) / U[i, i]
    
    return X

# Fungsi pengujian
def test_lu_decomposition_crout():
    # Kasus uji 1
    A1 = np.array([[2, 1], [1, -1]])
    b1 = np.array([4, 1])
    expected1 = np.array([3., 1.])
    result1 = lu_decomposition_crout(A1, b1)
    assert np.allclose(result1, expected1), f"Kasus uji 1 gagal: Hasil yang diharapkan {expected1}, tetapi diperoleh {result1}"

    # Kasus uji 2
    A2 = np.array([[3, -2, 5], [2, 6, -8], [1, 5, -6]])
    b2 = np.array([9, 3, 4])
    expected2 = np.array([2., 1., 1.])
    result2 = lu_decomposition_crout(A2, b2)
    assert np.allclose(result2, expected2), f"Kasus uji 2 gagal: Hasil yang diharapkan {expected2}, tetapi diperoleh {result2}"

    print("Semua kasus uji berhasil.")

# Menjalankan pengujian
test_lu_decomposition_crout()
